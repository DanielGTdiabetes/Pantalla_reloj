#!/usr/bin/env bash
set -euo pipefail

SCRIPT_NAME="pantalla-kiosk-chromium"

log() {
  printf '[%s] %s\n' "$SCRIPT_NAME" "$*"
}

warn() {
  printf '[%s][WARN] %s\n' "$SCRIPT_NAME" "$*" >&2
}

err() {
  printf '[%s][ERROR] %s\n' "$SCRIPT_NAME" "$*" >&2
}

usage() {
  cat <<'USAGE'
Pantalla reloj Chromium launcher

Usage:
  pantalla-kiosk-chromium [options] [-- chromium flags]

Options:
  --print-bin       Only resolve and print the Chromium binary path.
  --print-flags     Print the computed Chromium flags (without executing).
  --dry-run         Print binary and flags but do not launch Chromium.
  -h, --help        Show this message.

Extra arguments after "--" are passed directly to Chromium.
USAGE
}

PRINT_BIN=0
PRINT_FLAGS=0
DRY_RUN=0
PASS_THROUGH=()

while [[ $# -gt 0 ]]; do
  case "$1" in
    --print-bin)
      PRINT_BIN=1
      shift
      ;;
    --print-flags)
      PRINT_FLAGS=1
      shift
      ;;
    --dry-run)
      DRY_RUN=1
      shift
      ;;
    --)
      shift
      while [[ $# -gt 0 ]]; do
        PASS_THROUGH+=("$1")
        shift
      done
      break
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      PASS_THROUGH+=("$1")
      shift
      ;;
  esac
done

KIOSK_USER="${KIOSK_USER:-${USER:-$(id -un)}}"
CLASS_NAME="pantalla-kiosk"
STATE_DIR="${STATE_DIR:-/var/lib/pantalla-reloj/state/chromium}"
CACHE_DIR="${CACHE_DIR:-/var/lib/pantalla-reloj/cache/chromium}"
RUNTIME_DIR="${RUNTIME_DIR:-/var/lib/pantalla-reloj/state}" # shared state for sentinels
mkdir -p "$STATE_DIR" "$CACHE_DIR" "$RUNTIME_DIR"
chown "$KIOSK_USER:$KIOSK_USER" "$STATE_DIR" "$CACHE_DIR" 2>/dev/null || true

resolve_chromium_binary() {
  local candidate

  if [[ -n "${CHROME_BIN:-}" && -x "${CHROME_BIN}" ]]; then
    printf '%s\n' "$CHROME_BIN"
    return 0
  fi

  for candidate in chromium-browser chromium; do
    if candidate_path=$(command -v "$candidate" 2>/dev/null); then
      printf '%s\n' "$candidate_path"
      return 0
    fi
  done

  if [[ -x /snap/bin/chromium ]]; then
    printf '%s\n' "/snap/bin/chromium"
    return 0
  fi

  if fallback_path=$(readlink -f /snap/chromium/current/usr/lib/chromium-browser/chrome 2>/dev/null); then
    if [[ -x "$fallback_path" ]]; then
      printf '%s\n' "$fallback_path"
      return 0
    fi
  fi

  return 1
}

CHROMIUM_BIN="$(resolve_chromium_binary 2>/dev/null || true)"
if [[ -z "$CHROMIUM_BIN" ]]; then
  err "No se encontró un binario de Chromium compatible (apt o snap)."
  exit 1
fi

if [[ $PRINT_BIN -eq 1 ]]; then
  printf '%s\n' "$CHROMIUM_BIN"
  exit 0
fi

DISPLAY="${DISPLAY:-:0}"
XAUTHORITY="${XAUTHORITY:-/home/${KIOSK_USER}/.Xauthority}"
: "${PANTALLA_FORCE_SWIFTSHADER_FILE:=${RUNTIME_DIR}/.force-swiftshader}"
GPU_MODE="${PANTALLA_GPU_MODE:-auto}"

if [[ -f "$PANTALLA_FORCE_SWIFTSHADER_FILE" && "$GPU_MODE" == "auto" ]]; then
  GPU_MODE="swiftshader"
fi

run_gpu_probe() {
  local probe_ok=0
  local glxinfo_path xdpyinfo_path

  if glxinfo_path=$(command -v glxinfo 2>/dev/null); then
    if DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" "$glxinfo_path" -B >/tmp/.pantalla-glx.$$ 2>&1; then
      probe_ok=1
      if grep -qi 'software rasterizer\|llvmpipe' /tmp/.pantalla-glx.$$ 2>/dev/null; then
        warn "glxinfo detectó un renderer software (${glxinfo_path})."
      fi
    else
      warn "glxinfo falló; se habilitará SwiftShader (logs en /tmp/.pantalla-glx.$$)."
    fi
  else
    warn "glxinfo no está disponible en PATH."
  fi

  if [[ $probe_ok -eq 0 ]]; then
    if xdpyinfo_path=$(command -v xdpyinfo 2>/dev/null); then
      if DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" "$xdpyinfo_path" >/dev/null 2>&1; then
        probe_ok=1
      else
        warn "xdpyinfo no pudo consultar el servidor X."
      fi
    else
      warn "xdpyinfo no está disponible en PATH."
    fi
  fi

  rm -f /tmp/.pantalla-glx.$$ >/dev/null 2>&1 || true
  return $probe_ok
}

if [[ "$GPU_MODE" == "auto" ]]; then
  if run_gpu_probe; then
    GPU_MODE="auto"
  else
    warn "Fallo la detección de GPU; se habilitará SwiftShader."
    GPU_MODE="swiftshader"
  fi
fi

GPU_FLAGS=()
case "$GPU_MODE" in
  auto)
    log "GPU: modo automático"
    ;;
  swiftshader)
    log "GPU: modo SwiftShader"
    GPU_FLAGS+=(--use-gl=swiftshader --ignore-gpu-blocklist --enable-webgl --disable-gpu-driver-bug-workarounds)
    ;;
  software|disabled)
    log "GPU: modo software (disable-gpu)"
    GPU_FLAGS+=(--disable-gpu)
    ;;
  *)
    warn "GPU mode desconocido '${GPU_MODE}', usando automático"
    GPU_MODE="auto"
    ;;
esac

PKILL_PATTERN="--class=${CLASS_NAME}"
if [[ $DRY_RUN -ne 1 ]]; then
  if command -v pkill >/dev/null 2>&1; then
    pkill -9 -u "$KIOSK_USER" -f "$PKILL_PATTERN" >/dev/null 2>&1 || true
  fi
fi

URL="${KIOSK_URL:-http://127.0.0.1}"
SCALE="${CHROMIUM_SCALE:-0.60}"

COMMON_FLAGS=(
  "--class=${CLASS_NAME}"
  --kiosk
  --start-fullscreen
  "--app=${URL}"
  --no-first-run
  --no-default-browser-check
  --disable-translate
  --disable-infobars
  --disable-session-crashed-bubble
  --noerrdialogs
  --disable-features=InfiniteSessionRestore,Translate,HardwareMediaKeyHandling,CalculateNativeWinOcclusion
  --hide-scrollbars
  --overscroll-history-navigation=0
  --password-store=basic
  --test-type
  --ozone-platform=x11
  "--force-device-scale-factor=${SCALE}"
  "--disk-cache-dir=${CACHE_DIR}"
  "--user-data-dir=${STATE_DIR}"
  --enable-logging=stderr
  --autoplay-policy=no-user-gesture-required
)

if [[ -n "${CHROMIUM_EXTRA_FLAGS:-}" ]]; then
  # shellcheck disable=SC2206
  EXTRA_ENV_FLAGS=(${CHROMIUM_EXTRA_FLAGS})
  COMMON_FLAGS+=("${EXTRA_ENV_FLAGS[@]}")
fi

if [[ $PRINT_FLAGS -eq 1 || $DRY_RUN -eq 1 ]]; then
  printf '%s\n' "$CHROMIUM_BIN" "${COMMON_FLAGS[@]}" "${GPU_FLAGS[@]}" "${PASS_THROUGH[@]}"
fi

if [[ $DRY_RUN -eq 1 ]]; then
  exit 0
fi

log "Binario: ${CHROMIUM_BIN}"
log "Perfil: ${STATE_DIR}"
log "Cache: ${CACHE_DIR}"
log "URL: ${URL}"
log "Escala: ${SCALE}"
log "GPU mode: ${GPU_MODE}"

exec "$CHROMIUM_BIN" "${COMMON_FLAGS[@]}" "${GPU_FLAGS[@]}" "${PASS_THROUGH[@]}"
