#!/usr/bin/env bash
set -euo pipefail

DEFAULT_ORIGIN="http://127.0.0.1"
DEFAULT_URL="${DEFAULT_ORIGIN}/"

log() {
  printf '[pantalla-kiosk-chromium] %s\n' "$*" >&2
}

resolve_url() {
  local candidate="$1"
  if [[ -z "$candidate" ]]; then
    candidate="$DEFAULT_URL"
  fi
  if [[ "$candidate" == /* ]]; then
    candidate="${DEFAULT_ORIGIN%/}${candidate}"
  fi
  if [[ "$candidate" != http://* && "$candidate" != https://* ]]; then
    candidate="${candidate%/}"
    candidate="${DEFAULT_ORIGIN%/}/${candidate}"
  fi
  printf '%s\n' "$candidate"
}

find_chromium() {
  local override="${CHROMIUM_BIN_OVERRIDE:-}"
  if [[ -n "$override" ]]; then
    if [[ -x "$override" ]]; then
      printf '%s\n' "$override"
      return 0
    fi
    if command -v "$override" >/dev/null 2>&1; then
      printf '%s\n' "$(command -v "$override")"
      return 0
    fi
    log "WARN: CHROMIUM_BIN_OVERRIDE inválido (${override})"
  fi

  local candidate resolved
  for candidate in /usr/local/bin/chromium-kiosk-bin chromium-browser chromium /snap/bin/chromium; do
    if [[ -x "$candidate" ]]; then
      printf '%s\n' "$candidate"
      return 0
    fi
    if command -v "$candidate" >/dev/null 2>&1; then
      resolved="$(command -v "$candidate")"
      printf '%s\n' "$resolved"
      return 0
    fi
  done

  local snap_candidate="/snap/chromium/current/usr/lib/chromium-browser/chrome"
  if [[ -x "$snap_candidate" ]]; then
    printf '%s\n' "$snap_candidate"
    return 0
  fi

  return 1
}

prepare_dirs() {
  local profile_dir="$1" cache_dir="$2"
  install -d -m 0700 "$profile_dir"
  install -d -m 0755 "$cache_dir"
}

launch_chromium() {
  local use_swiftshader="$1"
  local chromium_bin="$2"
  local url="$3"
  local profile_dir="$4"
  local cache_dir="$5"

  local -a args
  args=(
    "$chromium_bin"
    --class=pantalla-kiosk
    --kiosk
    --start-fullscreen
    "--app=${url}"
    --no-first-run
    --no-default-browser-check
    --disable-translate
    --disable-infobars
    --disable-session-crashed-bubble
    --noerrdialogs
    --disable-features=InfiniteSessionRestore,Translate,HardwareMediaKeyHandling,CalculateNativeWinOcclusion
    --disable-renderer-backgrounding
    --disable-background-timer-throttling
    --disable-backgrounding-occluded-windows
    --hide-scrollbars
    --overscroll-history-navigation=0
    --password-store=basic
    --test-type
    --ozone-platform=x11
    --ignore-gpu-blocklist
    --enable-webgl
    --use-gl=egl-angle
    --enable-logging=stderr
    --v=1
    "--disk-cache-dir=${cache_dir}"
    "--user-data-dir=${profile_dir}"
  )

  if [[ -n "${CHROMIUM_SCALE:-}" ]]; then
    args+=("--force-device-scale-factor=${CHROMIUM_SCALE}")
  fi

  if (( use_swiftshader )); then
    args+=(--enable-unsafe-swiftshader)
  fi

  log "launch: ${args[*]}"
  log "url: ${url}"

  local log_file
  log_file="$(mktemp -t pantalla-chromium.XXXXXX)"

  "${args[@]}" 2> >(tee -a "$log_file" >&2)
  local status=$?

  local fallback=0
  if (( use_swiftshader == 0 )); then
    if (( status != 0 )); then
      fallback=1
    else
      if grep -Eq \
        'Automatic fallback to software WebGL has been deprecated|GPU process isn'"'"'t usable|GpuProcessHostUIShim:|GpuChannelHost|ERROR:gpu_init' \
        "$log_file"; then
        fallback=1
      fi
    fi
  fi

  rm -f "$log_file"

  if (( fallback )); then
    return 99
  fi

  return $status
}

main() {
  local chromium_bin
  if ! chromium_bin="$(find_chromium)"; then
    log "ERROR: no se encontró un binario de Chromium disponible"
    exit 1
  fi

  local expected_snap="/snap/chromium/current/usr/lib/chromium-browser/chrome"
  if [[ -x "$expected_snap" && "$chromium_bin" != "$expected_snap" ]]; then
    log "WARN: usando binario Chromium alternativo (${chromium_bin})"
  fi

  local raw_url
  raw_url="${KIOSK_URL:-${1:-}}"
  local target_url
  target_url="$(resolve_url "$raw_url")"

  local base_dir profile_dir cache_dir
  base_dir="${CHROMIUM_BASE_DIR:-${HOME}/snap/chromium/common/pantalla-reloj}"
  profile_dir="${CHROMIUM_USER_DATA_DIR:-${base_dir}/chromium}"
  cache_dir="${CHROMIUM_CACHE_DIR:-${base_dir}/cache}"

  prepare_dirs "$profile_dir" "$cache_dir"

  log "chromium_bin: ${chromium_bin}"
  log "user_data_dir: ${profile_dir}"
  log "cache_dir: ${cache_dir}"
  log "url: ${target_url}"

  if launch_chromium 0 "$chromium_bin" "$target_url" "$profile_dir" "$cache_dir"; then
    exit 0
  fi

  local first_status=$?
  if (( first_status == 99 )); then
    log "swiftshader fallback enabled"
    if launch_chromium 1 "$chromium_bin" "$target_url" "$profile_dir" "$cache_dir"; then
      exit 0
    fi
    local second_status=$?
    exit $second_status
  fi

  exit $first_status
}

main "$@"
