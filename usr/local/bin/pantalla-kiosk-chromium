#!/usr/bin/env bash
set -euo pipefail

DEFAULT_ORIGIN="http://127.0.0.1"
DEFAULT_URL="${DEFAULT_ORIGIN}/"

log() {
  printf '[pantalla-kiosk-chromium] %s\n' "$*" >&2
}

list_matching_windows() {
  local patterns="$1"
  if ! command -v wmctrl >/dev/null 2>&1; then
    return 0
  fi
  local display="${DISPLAY:-:0}"
  local auth="${XAUTHORITY:-}"
  DISPLAY="$display" XAUTHORITY="$auth" wmctrl -lx 2>/dev/null | awk -v pat="$patterns" '$3 ~ pat {print $1}'
}

close_existing_windows() {
  local patterns='pantalla-kiosk|chrome.chromium|chromium-browser.Chromium-browser|chromium.Chromium'
  if ! command -v wmctrl >/dev/null 2>&1; then
    log "wmctrl no disponible: se omite limpieza previa de ventanas"
    return
  fi
  local -a ids
  mapfile -t ids < <(list_matching_windows "$patterns")
  if ((${#ids[@]} == 0)); then
    return
  fi
  log "cerrando ${#ids[@]} ventanas Chromium residuales"
  local display="${DISPLAY:-:0}"
  local auth="${XAUTHORITY:-}"
  for wid in "${ids[@]}"; do
    [[ -n "$wid" ]] || continue
    DISPLAY="$display" XAUTHORITY="$auth" wmctrl -ic "$wid" || true
  done
  sleep 0.3
}

cleanup_profile_artifacts() {
  local profile_dir="$1"
  local cache_dir="$2"
  local -a singleton_patterns=(SingletonLock SingletonCookie SingletonSocket)
  local base
  for base in "$profile_dir" "$cache_dir"; do
    [[ -d "$base" ]] || continue
    find "$base" -maxdepth 2 -type f \( -name "${singleton_patterns[0]}" -o -name "${singleton_patterns[1]}" -o -name "${singleton_patterns[2]}" \) -delete 2>/dev/null || true
    local -a locks=()
    mapfile -t locks < <(find "$base" -maxdepth 3 -type f -name 'LOCK' -print 2>/dev/null)
    if ((${#locks[@]} > 0)); then
      local lock
      for lock in "${locks[@]}"; do
        rm -f "$lock"
      done
      log "eliminados ${#locks[@]} LOCK residuales en ${base}"
    fi
  done
}

resolve_url() {
  local candidate="$1"
  if [[ -z "$candidate" ]]; then
    candidate="$DEFAULT_URL"
  fi
  if [[ "$candidate" == /* ]]; then
    candidate="${DEFAULT_ORIGIN%/}${candidate}"
  fi
  if [[ "$candidate" != http://* && "$candidate" != https://* ]]; then
    candidate="${candidate%/}"
    candidate="${DEFAULT_ORIGIN%/}/${candidate}"
  fi
  printf '%s\n' "$candidate"
}

find_chromium() {
  local override="${CHROMIUM_BIN_OVERRIDE:-}"
  if [[ -n "$override" ]]; then
    if [[ -x "$override" ]]; then
      printf '%s\n' "$override"
      return 0
    fi
    if command -v "$override" >/dev/null 2>&1; then
      printf '%s\n' "$(command -v "$override")"
      return 0
    fi
    log "WARN: CHROMIUM_BIN_OVERRIDE inválido (${override})"
  fi

  local candidate resolved
  for candidate in /usr/local/bin/chromium-kiosk-bin chromium-browser chromium /snap/bin/chromium; do
    if [[ -x "$candidate" ]]; then
      printf '%s\n' "$candidate"
      return 0
    fi
    if command -v "$candidate" >/dev/null 2>&1; then
      resolved="$(command -v "$candidate")"
      printf '%s\n' "$resolved"
      return 0
    fi
  done

  local snap_candidate="/snap/chromium/current/usr/lib/chromium-browser/chrome"
  if [[ -x "$snap_candidate" ]]; then
    printf '%s\n' "$snap_candidate"
    return 0
  fi

  return 1
}

prepare_dirs() {
  local profile_dir="$1" cache_dir="$2"
  install -d -m 0700 "$profile_dir"
  install -d -m 0700 "$cache_dir"
}

launch_chromium() {
  local use_swiftshader="$1"
  local chromium_bin="$2"
  local url="$3"
  local profile_dir="$4"
  local cache_dir="$5"

  local -a args
  args=(
    "$chromium_bin"
    --class=pantalla-kiosk
    --kiosk
    --start-fullscreen
    "--app=${url}"
    --no-first-run
    --no-default-browser-check
    --disable-translate
    --disable-infobars
    --disable-session-crashed-bubble
    --noerrdialogs
    --disable-features=InfiniteSessionRestore,Translate,HardwareMediaKeyHandling,CalculateNativeWinOcclusion
    --disable-renderer-backgrounding
    --disable-background-timer-throttling
    --disable-backgrounding-occluded-windows
    --hide-scrollbars
    --overscroll-history-navigation=0
    --password-store=basic
    --test-type
    --ozone-platform=x11
    --ignore-gpu-blocklist
    --enable-webgl
    --use-gl=egl-angle
    "--disk-cache-dir=${cache_dir}"
    "--user-data-dir=${profile_dir}"
  )

  if [[ -n "${CHROMIUM_SCALE:-}" ]]; then
    args+=("--force-device-scale-factor=${CHROMIUM_SCALE}")
  fi

  if [[ "${PANTALLA_CHROMIUM_VERBOSE:-0}" == "1" ]]; then
    args+=(--enable-logging=stderr --v=1)
  else
    args+=(--enable-logging=stderr --log-level=1)
  fi

  if (( use_swiftshader )); then
    args+=(--enable-unsafe-swiftshader)
    log "swiftshader habilitado para esta ejecución"
  fi

  log "launch: ${args[*]}"
  log "url: ${url}"

  local log_dir="/var/log/pantalla"
  install -d -m 0755 "$log_dir"
  local persistent_log="${log_dir}/browser-kiosk.log"
  touch "$persistent_log"
  chmod 0644 "$persistent_log" 2>/dev/null || true
  if [[ -s "$persistent_log" ]]; then
    tail -n 4000 "$persistent_log" >"${persistent_log}.tmp" 2>/dev/null && mv "${persistent_log}.tmp" "$persistent_log"
  fi

  local log_file
  log_file="$(mktemp -p /tmp pantalla-chromium.XXXXXX.log)"
  if [[ -z "$log_file" ]]; then
    log "no se pudo crear archivo temporal en /tmp"
    log_file="/tmp/pantalla-chromium.log"
  fi
  log "stderr se registrará en ${log_file} y ${persistent_log}"

  "${args[@]}" 2> >(tee -a "$log_file" | tee -a "$persistent_log" >&2)
  local status=$?

  local fallback=0
  if (( use_swiftshader == 0 )); then
    if (( status != 0 )); then
      fallback=1
    else
      if grep -Eq \
        'Automatic fallback to software WebGL has been deprecated|GPU process isn'"'"'t usable|GpuProcessHostUIShim: The GPU process has crashed|GpuProcessHostUIShim:|GpuChannelHost|ERROR:gpu_init' \
        "$log_file"; then
        fallback=1
      fi
    fi
  fi

  if (( fallback )); then
    return 99
  fi

  return $status
}

main() {
  # Validar que XAUTHORITY existe y es legible
  if [[ -z "${XAUTHORITY:-}" ]]; then
    log "ERROR: XAUTHORITY no está definido"
    exit 1
  fi
  
  if [[ ! -r "$XAUTHORITY" ]]; then
    log "ERROR: XAUTHORITY no es legible: $XAUTHORITY"
    exit 1
  fi
  
  # Validar que DISPLAY está configurado
  if [[ -z "${DISPLAY:-}" ]]; then
    log "ERROR: DISPLAY no está definido"
    exit 1
  fi
  
  # Validar que el servidor X está accesible
  if ! xset q >/dev/null 2>&1; then
    log "ERROR: No se puede acceder al servidor X en $DISPLAY"
    log "ERROR: Verifica que pantalla-xorg@ está ejecutándose"
    exit 1
  fi
  
  # Validar que el backend está respondiendo (con timeout)
  if ! curl -sf --max-time 5 http://127.0.0.1:8081/api/health >/dev/null 2>&1; then
    log "WARN: Backend no responde en http://127.0.0.1:8081/api/health"
    log "WARN: Continuando de todas formas, pero el frontend puede no funcionar"
  fi
  
  local chromium_bin
  if ! chromium_bin="$(find_chromium)"; then
    log "ERROR: no se encontró un binario de Chromium disponible"
    log "ERROR: Instala Chromium o configura CHROMIUM_BIN_OVERRIDE"
    exit 1
  fi
  
  # Validar que el binario es realmente ejecutable
  if [[ ! -x "$chromium_bin" ]]; then
    log "ERROR: Chromium binario encontrado pero no es ejecutable: $chromium_bin"
    exit 1
  fi
  
  # Verificar que realmente es un binario válido
  if ! file "$chromium_bin" | grep -qE '(ELF|executable|binary)'; then
    log "ERROR: $chromium_bin no parece ser un binario ejecutable válido"
    exit 1
  fi

  local expected_snap="/snap/chromium/current/usr/lib/chromium-browser/chrome"
  if [[ -x "$expected_snap" && "$chromium_bin" != "$expected_snap" ]]; then
    log "WARN: usando binario Chromium alternativo (${chromium_bin})"
  fi

  local raw_url
  raw_url="${KIOSK_URL:-${1:-}}"
  local target_url
  target_url="$(resolve_url "$raw_url")"

  local allow_swiftshader=0
  if [[ "${PANTALLA_ALLOW_SWIFTSHADER:-0}" == "1" ]]; then
    allow_swiftshader=1
    log "SwiftShader permitido bajo demanda (PANTALLA_ALLOW_SWIFTSHADER=1)"
  fi

  local base_dir profile_dir cache_dir
  base_dir="${CHROMIUM_BASE_DIR:-${HOME}/snap/chromium/common/pantalla-reloj}"
  profile_dir="${CHROMIUM_USER_DATA_DIR:-${base_dir}/chromium}"
  cache_dir="${CHROMIUM_CACHE_DIR:-${base_dir}/cache}"

  prepare_dirs "$profile_dir" "$cache_dir"
  cleanup_profile_artifacts "$profile_dir" "$cache_dir"

  if [[ -z "${DBUS_SESSION_BUS_ADDRESS:-}" ]]; then
    export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"
  fi
  export GTK_USE_PORTAL=0
  export GIO_USE_PORTALS=0

  log "chromium_bin: ${chromium_bin}"
  log "user_data_dir: ${profile_dir}"
  log "cache_dir: ${cache_dir}"
  log "url: ${target_url}"

  if [[ "${PANTALLA_CHROMIUM_VERBOSE:-0}" == "1" ]]; then
    log "Chromium se inicia en modo verbose (--v=1)"
  fi

  close_existing_windows

  if launch_chromium 0 "$chromium_bin" "$target_url" "$profile_dir" "$cache_dir"; then
    exit 0
  fi

  local first_status=$?
  if (( first_status == 99 )); then
    if (( allow_swiftshader )); then
      log "Activando fallback SwiftShader (--enable-unsafe-swiftshader)"
      if launch_chromium 1 "$chromium_bin" "$target_url" "$profile_dir" "$cache_dir"; then
        exit 0
      fi
      local second_status=$?
      exit $second_status
    fi
    log "SwiftShader deshabilitado (exporta PANTALLA_ALLOW_SWIFTSHADER=1 para permitirlo)"
    exit $first_status
  fi

  exit $first_status
}

main "$@"
