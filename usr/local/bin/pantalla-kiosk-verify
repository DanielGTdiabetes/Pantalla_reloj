#!/usr/bin/env bash
set -euo pipefail

UI_HEALTH_URL="${UI_HEALTH_URL:-http://127.0.0.1/ui-healthz}"
BACKEND_HEALTH_URL="${BACKEND_HEALTH_URL:-http://127.0.0.1/api/health}"
STATE_ROOT="/var/lib/pantalla-reloj"
KIOSK_ENV_FILE="${STATE_ROOT}/state/kiosk.env"
TARGET_USER="${VERIFY_USER:-${SUDO_USER:-$(id -un)}}"

log() {
  printf '[pantalla-kiosk-verify] %s\n' "$*"
}

RESULTS=()
record_result() {
  RESULTS+=("$1=$2")
}

check_ui_health() {
  local body
  if ! body="$(curl -fsS "$UI_HEALTH_URL" 2>/dev/null)"; then
    log "UI health check failed (${UI_HEALTH_URL})"
    record_result "ui" "fail"
    return 1
  fi
  if [[ "$body" != "ok" ]]; then
    log "UI health unexpected payload: ${body}"
    record_result "ui" "unexpected"
    return 1
  fi
  record_result "ui" "ok"
  return 0
}

check_backend_health() {
  local tmp http_code
  tmp="$(mktemp)"
  if ! http_code="$(curl -fsS -w '%{http_code}' -o "$tmp" "$BACKEND_HEALTH_URL" 2>/dev/null)"; then
    log "Backend health request failed (${BACKEND_HEALTH_URL})"
    rm -f "$tmp"
    record_result "backend" "fail"
    return 1
  fi
  local body
  body="$(<"$tmp")"
  rm -f "$tmp"
  if [[ "$http_code" != "200" ]]; then
    log "Backend health returned HTTP ${http_code}"
    record_result "backend" "http${http_code}"
    return 1
  fi
  record_result "backend" "ok"
  return 0
}

check_kiosk_units() {
  local units=("pantalla-kiosk@${TARGET_USER}.service" "pantalla-kiosk-chromium@${TARGET_USER}.service")
  local active_any=0
  local status
  for unit in "${units[@]}"; do
    if systemctl list-units --full --all "$unit" >/dev/null 2>&1; then
      if status="$(systemctl is-active "$unit" 2>/dev/null)"; then
        record_result "$unit" "$status"
        if [[ "$status" == "active" ]]; then
          active_any=1
        fi
      else
        record_result "$unit" "unknown"
      fi
    fi
  done
  if (( active_any )); then
    record_result "kiosk" "active"
    return 0
  fi
  log "No active kiosk units for user ${TARGET_USER}"
  record_result "kiosk" "inactive"
  return 1
}

is_diag_mode() {
  local url="$1"
  if [[ "$url" == *"/diagnostics/auto-pan"* ]]; then
    return 0
  fi
  return 1
}

maybe_restart_for_swiftshader() {
  local diag_url="$1"
  local unit="pantalla-kiosk-chromium@${TARGET_USER}.service"
  if ! systemctl list-units --full --all "$unit" >/dev/null 2>&1; then
    return 0
  fi
  if ! systemctl is-active "$unit" >/dev/null 2>&1; then
    return 0
  fi
  if ! is_diag_mode "$diag_url"; then
    return 0
  fi

  log "Diag mode detected (KIOSK_URL=${diag_url}), waiting for animation watchdog"
  sleep 7

  local journal_output
  if ! journal_output="$(journalctl -u "$unit" --since "-10 minutes" --no-pager 2>/dev/null)"; then
    return 0
  fi

  local error_pattern='Automatic fallback to software WebGL has been deprecated|GPU process isn''t usable|GpuProcessHostUIShim|ERROR:gpu_init'
  if ! grep -Eq "$error_pattern" <<<"$journal_output"; then
    record_result "webgl" "clean"
    return 0
  fi

  if grep -Eq 'swiftshader fallback enabled' <<<"$journal_output"; then
    log "SwiftShader fallback already engaged"
    record_result "webgl" "swiftshader"
    return 0
  fi

  log "GPU warnings detected; restarting ${unit} to trigger SwiftShader"
  systemctl restart "$unit"
  sleep 5
  record_result "webgl" "restart"
  return 0
}

main() {
  local failures=0
  check_ui_health || failures=$((failures + 1))
  check_backend_health || failures=$((failures + 1))
  check_kiosk_units || failures=$((failures + 1))

  local kiosk_url=""
  if [[ -r "$KIOSK_ENV_FILE" ]]; then
    # shellcheck disable=SC1090
    source "$KIOSK_ENV_FILE"
    kiosk_url="${KIOSK_URL:-}"
  fi

  maybe_restart_for_swiftshader "$kiosk_url"

  printf 'pantalla-kiosk-verify summary\n'
  for entry in "${RESULTS[@]}"; do
    printf ' - %s\n' "$entry"
  done

  if (( failures > 0 )); then
    exit 1
  fi
  exit 0
}

main "$@"
